/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package interview.case.summer21

import interview.case.summer21.model.ITextBox
import interview.case.summer21.model.Rectangle
import interview.case.summer21.model.TextBox
import interview.case.summer21.model.WordBox
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper


fun main(args: Array<String>) {
    generateExportJson()
}

fun readPdfWords() {

    val pdfData = ResourceLoader.loadPdfData("/import2.pdf")
            ?: throw IllegalArgumentException("Could not load pdf")
    val pdfDocument = PdfTextExtractor().extractDocument(pdfData)
    val words = pdfDocument.pages.first().words
    val threshold = 3f
    val mergedWords = words.fold(listOf<ITextBox>()) { acc, curr ->
        if (acc.isEmpty()) {
            acc + curr
        } else if (acc.last().box.intersects(curr.box.growLeft(threshold))) {
            val boxes = listOf(acc.last(), curr)
            val mergedBox = WordBox(
                    text = boxes.joinToString("") { it.text },
                    box = Rectangle.union(boxes.map { it.box }),
                    baseLineY = boxes.map { it.baseLineY }.average().toFloat()
            )
            acc.dropLast(1) + mergedBox
        } else {
            acc + curr
        }
    }
    val randomizedWords = mergedWords.shuffled()

    val mapper = jacksonObjectMapper().writerWithDefaultPrettyPrinter()
    val json = mapper.writeValueAsString(randomizedWords)
    println(json)
}

fun generateExportJson() {
    val csv = """
        1,170,789
        2,160,789
        3,153,789
        4,154,790
        5,157,793
        6,155,791
        7,172,795
        8,172,795
        9,156,793
        10,159,790
        11,156,794
        12,157,794
        13,158,790
        14,160,792
        15,170,789
        16,171,789
        17,172,795
        18,157,794
    """.trimIndent()

    val rows = csv.split("\n")
            .map { row ->
                val cols = row.split(",")
                ExportRow(cols[0].toInt(), cols[1], cols[2])
            }

    val mapper = jacksonObjectMapper().writerWithDefaultPrettyPrinter()
    val json = mapper.writeValueAsString(rows)
    println(json)
}

data class ExportRow(
        val varelinje: Int,
        val ordrenummer: String,
        val varenummer: String
)